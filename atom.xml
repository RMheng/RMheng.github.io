<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-31T05:24:30.368Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>rmheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sgx笔记</title>
    <link href="http://yoursite.com/2019/07/31/sgx%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/07/31/sgx笔记/</id>
    <published>2019-07-31T05:23:58.000Z</published>
    <updated>2019-07-31T05:24:30.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="intel-sgx笔记"><a href="#intel-sgx笔记" class="headerlink" title="intel sgx笔记"></a>intel sgx笔记</h1><p>intel sgx是使得程序能够在可信的环境下执行代码并保护机密信息，从而让开发者直接控制程序的安全性。<br>intel sgx在内存中划定了名为安全区（enclave）的隔离区域，用来存放代码和数据。</p><h2 id="features-and-benefits"><a href="#features-and-benefits" class="headerlink" title="features and benefits"></a>features and benefits</h2><ul><li>这些不可寻址的分页内存是从系统的物理内存中保留的，并且经过了加密；</li><li>安全区是受保护的内存区域，应用程序可以在里面处理它的机密数据而不必担心泄露；</li></ul><p>包含intel SGX技术的应用程序分为两个部分，分别是可信部分和不可信部分。当应用程序需要处理机密时，会创建一个位于可信内存的安全区，然后调用可信函数。可信函数是由开发者创建的，专门在安全区内执行的函数。一旦这个函数被调用，应用程序就会在可信区域执行，并且明文访问安全区内的代码和数据。而试图从安全区之外的地方访问安全区内存的行为都会被处理器拒绝，即使是系统特权用户的行为。</p><p>当可信函数执行完毕之后，安全区的数据依然会保留在可信内存中，而应用程序返回到不可信区域继续执行，并且失去了对可信内存的访问权限。</p><h2 id="检测和开启intel-SGX"><a href="#检测和开启intel-SGX" class="headerlink" title="检测和开启intel SGX"></a>检测和开启intel SGX</h2><p>应用程序可以使用intel SGX的四个条件</p><blockquote><p>CPU必须支持intel SGX的指令<br>BIOS必须支持intel SGX<br>必须在BIOS设置中开启intel SGX<br>必须安装intel SGX PSW</p></blockquote><p>BIOS设置中intel SGX可能的三种选项是启用、禁用以及软件控制</p><blockquote><p>“启用”：严格开启了intel SGX<br>“禁用”：严格关闭了intel SGX<br>“软件控制”：允许包含intel SGX技术的应用程序在系统重启后启用intel SGX<br>安装程序时检查的步骤：<br>检查CPU和BIOS是否支持intel SGX<br>检查intel SGX PSW是否安装，如果没有安装，就安装<br>检查intel SGX是否在BIOS中开启，如果没有开启，则用软件控制开启</p></blockquote><p>应用程序本身的检查</p><blockquote><p>检查intel SGX PSW是否安装<br>检查SGX是否可用，如果不可用，则使其变为启用</p></blockquote><p>如果上述步骤中的任一步骤失败，则说明系统不支持intel SGX。</p><h2 id="如何设计intel-SGX应用程序"><a href="#如何设计intel-SGX应用程序" class="headerlink" title="如何设计intel SGX应用程序"></a>如何设计intel SGX应用程序</h2><p>所有的intel SGX应用程序都有相同的基本结构，也就是他们在设计时都要遵循一些通用的原则。intel SGX应用程序分成两个部分，可信部分和不可信部分。</p><p>应用程序的可信部分由它的安全区（enclaves）组成，一个应用程序可以拥有一个或多个安全区。安全区存储在加密的内存中，并受intel SGX的保护。安全区是可信的，它们一旦被建立就不能被篡改。如果安全区的数据被恶意篡改，就会被CPU检测到，并不会被加载。</p><p>可信部分之外的被称为非可信部分，也就是不会被intel SGX保护的应用程序或内存区域。</p><p>如果我们需要设计一个intel SGX程序，就需要将程序分成两个不同的部分，需要判断哪些代码应该放在安全区，哪些代码应该放在安全区之外以及可信部分和非可信部分的交互。</p><p>划分代码的关键步骤：</p><ul><li>确定机密信息  </li><li>确定机密数据的提供者和使用者(画出机密数据在应用程序中的各个组件的流程图，也就是机密数据的来源和去向)  </li><li>确定安全边界(划定边界时，需要尽量包含尽可能多的机密数据，并最大限度地减少与非信任代码的交互)  </li><li>精简安全区的代码<br>在为安全区以及它的接口编写代码时需要记住：<blockquote><p>单一系统中，用于运行所有安全区的内存容量是固定的。    </p></blockquote></li></ul><p>安全区的体积应该尽可能地小。当不再需要机密数据时，安全区应该被销毁。  </p><blockquote><p>进出安全区的调用会产生性能损失，就和CPU上下文切换一样。 </p></blockquote><p>通过一次调用完成大量工作，会比分成多次调用来完成等量的工作更有效率。</p><h2 id="安全区定义语言（EDL）"><a href="#安全区定义语言（EDL）" class="headerlink" title="安全区定义语言（EDL）"></a>安全区定义语言（EDL）</h2><p>intel SGX提供的基本保护措施是安全区的机密数据仅能够被安全区内的代码访问。执行安全区内的代码的唯一方式是通过开发人员创建的接口函数。</p><p>每个安全区可以定义一个或多个e-call，e-call是非可信应用程序进入安全区的入口点；安全区也可以定义o-call，o-call使得安全函数可以调用外部的非可信应用程序，而后再返回安全区。ECALL和OCALL共同组成了安全区的接口，这些函数并非由非可信应用程序执行。</p><p>处理器对安全区出入口的访问严格控制，同时为了完成出入安全区的转换，必须依序执行特定的CPU指令。</p><p>intel SGX SDK把这些底层细节做了抽象，从而让软件开发者可以用熟悉的编程环境进行开发，名为Edger8r的特殊工具会自动为E-CALL和O-CALL生成代理函数，从而应用程序就可以像调用其他C语言函数一样调用它。</p><p>Edger8r从EDL文件中读取安全区接口的定义来创建代理函数。</p><p>安全区定义语言(enclave definition language,EDL)，EDL文件和声明函数原型的C语言风格的头文件十分相似。</p><p>EDL文件由可信区和非可信区组成。E-CALL定义在可信区，而O-CALL定义在非可信区。这些函数原型与C非常相似，但还需要一些额外的关键字。<br>所有能够被非可信程序调用的E-CALL都必须声明为public，每个安全区都至少有一个声明为public的E-CALL，不含public关键字的E-CALL只能被另一个O-CALL执行。</p><p>在进行E-CALL或O-CALL调用时，函数参数要从非可信内存和可信内存之间进行封送处理。若函数参数是值传递，对应的封送处理就是单向的。在E-CALL或O-CALL内部进行的更改不会反映到被调用的函数中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">enclave&#123;</span><br><span class="line">    from <span class="string">"sgx_tstdc.edl"</span> <span class="keyword">import</span> *;</span><br><span class="line">    trusted&#123;</span><br><span class="line">        <span class="comment">/*define ECALLs here. */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">my_ecall</span><span class="params">(<span class="keyword">int</span> value)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">ecall_private</span><span class="params">(<span class="keyword">int</span> value)</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    untrusted&#123;</span><br><span class="line">        <span class="comment">/*define OCALLs here. */</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">an_ocall</span><span class="params">(<span class="keyword">int</span> p1,<span class="keyword">int</span> p2)</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果函数参数时引用传递，就必须完整地描述数据的封送处理过程，每个指针或参数之前必须有方括号来描述封送处理的方向以及封送处理的元素数量</p><p>in关键字表示数据需要封送到E-CALL或O-CALL之内，而如果是out关键字则意味着数据需要从E-CALL或O-CALL封送回调用的函数。如果需要out，则需要在调用E-CALL或O-CALL之前分配好数据的缓冲区。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">my_ecall</span><span class="params">([in] <span class="keyword">int32_t</span> *value)</span></span>;</span><br></pre></td></tr></table></figure><p>如果同时指定了in和out关键字，意味着要进行两个方向的封送处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">my_ecall</span><span class="params">([in,out] <span class="keyword">int32_t</span> *value)</span></span></span><br></pre></td></tr></table></figure><p>在缺省情况下，Edger8r假定数据的缓冲区大小等于参数的sizeof。如果指针指向的是一个数组，那么需要提供count参数来指定需要复制的元素个数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">my_ecall</span><span class="params">([in,count=<span class="number">10</span>] <span class="keyword">int32_t</span> *<span class="built_in">array</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>如果参数的个数要等到运行的时候才能确定，也可以用另一个函数参数来表示个数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">my_ecall</span><span class="params">([in,count=len] <span class="keyword">int32_t</span> *<span class="built_in">array</span>,<span class="keyword">size_t</span> len)</span></span>;</span><br></pre></td></tr></table></figure><p>如果使用in关键字封送一个以’\0’作为终止符的字符串，可以选择使用string或者是wstring来代替count关键字，string或wstring不能和out关键字一起使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">my_ecall</span><span class="params">([in,<span class="built_in">string</span>] <span class="keyword">int32_t</span> *name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">my_wecall</span><span class="params">([in,wstring] <span class="keyword">wchar_t</span> *unicodename)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="EDL语言的进阶主题"><a href="#EDL语言的进阶主题" class="headerlink" title="EDL语言的进阶主题"></a>EDL语言的进阶主题</h2><p>有时需要把void指针传给E-CALL或O-CALL，问题在于边界例程无法知道void类型对应的大小，无法计算封送处理需要的数据缓冲区大小。为了解决这个问题，EDL语法提供了size关键字，通过指定单个元素的大小，边界例程就知道需要拷贝多少数据。在下面的例子中，32个8字节数据将会被封送到E-CALL中。  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">my_ecall</span><span class="params">([in,count=<span class="number">32</span>,size=<span class="number">8</span>] <span class="keyword">void</span> *buffer)</span></span></span><br></pre></td></tr></table></figure><p>在不希望封送完整的数据缓冲区时，仅仅希望把指针指向的地址传给E-CALL或O-CALL，这可以通过user_check关键字来完成。这样行为传递的指针不进行边界例程的安全检查和数据封送处理，E-CALL和O-CALL将会直接作用于指针的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">my_ecall</span><span class="params">([user_check] <span class="keyword">void</span> *buff)</span></span>;</span><br></pre></td></tr></table></figure><p>只有被声明为public的E-CALL可以被不安全的函数调用，被称之为root E-CALL，由EDL文件中使用的public关键字指定，不含public关键字的E-CALL只能被另一个O-CALL调用，但是，在缺省情况下，O-CALL不能调用任何E-CALL，必须通过allow关键字声明该O-CALL可以调用哪些E-CALL,allow后面跟着允许的E-CALL名称列表。在本例中，O-CALL get_msg_block()只能调用E-CALL update_hash()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">enclave&#123;</span><br><span class="line">    from <span class="string">"sgx_tstdc.edi"</span> <span class="keyword">import</span> *;</span><br><span class="line">    trusted&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init_hash</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get_hash</span><span class="params">([out] <span class="keyword">char</span> hash[<span class="number">32</span>])</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">update_hash</span><span class="params">([in,count=len],<span class="keyword">char</span> *block,<span class="keyword">size_t</span> len)</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    untrusted&#123;</span><br><span class="line">        <span class="keyword">size_t</span> get_msg_block() allow(updata_hash);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调试intel-SGX应用程序"><a href="#调试intel-SGX应用程序" class="headerlink" title="调试intel SGX应用程序"></a>调试intel SGX应用程序</h2><p>intel SGX安全区可以以debug模式或release模式构建。</p><ul><li>debug模式<blockquote><p>debug模式下的安全区是可以调试的；<br>可以使用intel SGX调试器附加到上面；<br>查看当前的状态；<br>以及对代码进行逐句调试，就和调试其他程序一样  </p></blockquote></li></ul><p>当在调试intel SGX应用程序时，它很有可能是以debug模式构建的，CPU允许运行任何以debug模式构建的安全区，由于您可以用intel SGX调试器附到安全区上，这些安全区显然是不安全的，所以<strong>永远不要在生产环境上部署以debug模式构建的安全区</strong></p><ul><li>release模式</li></ul><p>release模式构建的安全区无论如何也无法进行调试，CPU严格执行这条限制。对于intel SGX安全区的调试，仍然需要相关的CPU指令支持，这就意味着必须使用随intel SGX SDK安装的intel SGX调试器进行调试，而其他的调试器只会跳过安全区的代码。</p><h2 id="intel-SGX的数据密封功能"><a href="#intel-SGX的数据密封功能" class="headerlink" title="intel SGX的数据密封功能"></a>intel SGX的数据密封功能</h2><p>intel SGX应用程序也有可能需要把机密数据保存到安全区以外。安全区从本质上来说是无状态的：</p><blockquote><p>当电脑进入睡眠、关机或者应用程序退出时，安全区就会被销毁；<br>应用程序显示将其销毁时，安全区也会被销毁，当安全区被销毁后，其中的所有内容都会丢失。</p></blockquote><p>为了持久保存安全区内存储的数据，必须显式地将其发送到安全区以外的非可信内存中。由于不可信内存是不可信的，所以系统为数据提供密封功能。当数据被密封时，数据在安全区内用密钥加密，这个密钥是直接从CPU中取得的。加密的数据块被称为密封的数据，它只能在创建的电脑上进行解密。</p><p>密封数据时可以选择的密钥策略有两种：</p><ul><li>安全区标识(MRENCLAVE)  </li></ul><p>安全区标识策略生成一个该安全区独有的密钥，这就意味着只有同一台电脑的同一个安全区可以解封数据</p><ul><li>密封标识(MRSIGNER)  </li></ul><p>密封标识基于安全区密封授权方的密钥生成一个密钥，这使得一个安全区密封的数据可被另一个安全区解封。只要是同一台电脑，而且软件是由相同开发商开发（密封授权方的密钥相同）即可。该策略可以允许数据被新版应用程序或其他构建版本的应用程序所读取。该方法可以在两个不同的应用程序的两个不同的安全区中共享数据。</p><p>这两种策略的相同点是密封数据的电脑的指纹是密钥的一个输入，这就意味着如果密封的数据被复制到了另一台电脑上就无法被解封。</p><p>密钥的另一个输入是安全区的debug模式或release模式，debug的安全区无法解封release模式的安全区密封的数据，反之亦然。这项安全机制是用于防止intel SGX调试器在调试debug的安全区时，泄露来自release模式的安全区的数据。</p><p>注意，密封数据可能具有非常严重的安全隐患：<strong>安全区并不会检验非可信应用程序的真实性，绝不能假设只有自己的应用程序能加载安全区或者说E-CALL一定会按照预期的顺序执行！</strong> 任何人都可以加载安全区，并按照他们希望的顺序执行E-CALL。安全区API绝不能因为密封数据和解封数据而泄露了机密或授予了不该授予的权限。</p><p>总而言之，密封数据的功能是为了安全地把机密数据导出到安全区以外，并确保这些机密数据不会被篡改、替换、窃听或者是在解封数据时，被复制到另一台电脑上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;intel-sgx笔记&quot;&gt;&lt;a href=&quot;#intel-sgx笔记&quot; class=&quot;headerlink&quot; title=&quot;intel sgx笔记&quot;&gt;&lt;/a&gt;intel sgx笔记&lt;/h1&gt;&lt;p&gt;intel sgx是使得程序能够在可信的环境下执行代码并保护机密信息
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/07/30/hello-world/"/>
    <id>http://yoursite.com/2019/07/30/hello-world/</id>
    <published>2019-07-30T04:38:42.236Z</published>
    <updated>2019-07-30T04:38:42.236Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
